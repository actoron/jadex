/* Generated By:JJTree&JavaCC: Do not edit this line. ParserImplConstants.java */
package jadex.javaparser.javaccimpl;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserImplConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int NEW = 8;
  /** RegularExpression Id. */
  int INSTANCEOF = 9;
  /** RegularExpression Id. */
  int SELECT = 10;
  /** RegularExpression Id. */
  int ALL = 11;
  /** RegularExpression Id. */
  int ANY = 12;
  /** RegularExpression Id. */
  int ONE = 13;
  /** RegularExpression Id. */
  int IOTA = 14;
  /** RegularExpression Id. */
  int FROM = 15;
  /** RegularExpression Id. */
  int IN = 16;
  /** RegularExpression Id. */
  int WHERE = 17;
  /** RegularExpression Id. */
  int ORDER = 18;
  /** RegularExpression Id. */
  int BY = 19;
  /** RegularExpression Id. */
  int ASC = 20;
  /** RegularExpression Id. */
  int DESC = 21;
  /** RegularExpression Id. */
  int BOOLEAN = 22;
  /** RegularExpression Id. */
  int DOUBLE = 23;
  /** RegularExpression Id. */
  int FLOAT = 24;
  /** RegularExpression Id. */
  int LONG = 25;
  /** RegularExpression Id. */
  int INT = 26;
  /** RegularExpression Id. */
  int SHORT = 27;
  /** RegularExpression Id. */
  int BYTE = 28;
  /** RegularExpression Id. */
  int CHAR = 29;
  /** RegularExpression Id. */
  int TRUE = 30;
  /** RegularExpression Id. */
  int FALSE = 31;
  /** RegularExpression Id. */
  int NULL = 32;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 33;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 34;
  /** RegularExpression Id. */
  int HEX_LITERAL = 35;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 36;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 37;
  /** RegularExpression Id. */
  int EXPONENT = 38;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 39;
  /** RegularExpression Id. */
  int STRING_LITERAL = 40;
  /** RegularExpression Id. */
  int QUESTIONMARK = 41;
  /** RegularExpression Id. */
  int IDENTIFIER = 42;
  /** RegularExpression Id. */
  int LETTER = 43;
  /** RegularExpression Id. */
  int DIGIT = 44;
  /** RegularExpression Id. */
  int LPAREN = 45;
  /** RegularExpression Id. */
  int RPAREN = 46;
  /** RegularExpression Id. */
  int LBRACE = 47;
  /** RegularExpression Id. */
  int RBRACE = 48;
  /** RegularExpression Id. */
  int LBRACKET = 49;
  /** RegularExpression Id. */
  int RBRACKET = 50;
  /** RegularExpression Id. */
  int SEMICOLON = 51;
  /** RegularExpression Id. */
  int COMMA = 52;
  /** RegularExpression Id. */
  int DOT = 53;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"new\"",
    "\"instanceof\"",
    "\"select\"",
    "\"all\"",
    "\"any\"",
    "\"one\"",
    "\"iota\"",
    "\"from\"",
    "\"in\"",
    "\"where\"",
    "\"order\"",
    "\"by\"",
    "\"asc\"",
    "\"desc\"",
    "\"boolean\"",
    "\"double\"",
    "\"float\"",
    "\"long\"",
    "\"int\"",
    "\"short\"",
    "\"byte\"",
    "\"char\"",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"?\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\":\"",
    "\"||\"",
    "\"&&\"",
    "\"|\"",
    "\"^\"",
    "\"&\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"<<\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"!\"",
    "\"~\"",
    "\"=\"",
  };

}
