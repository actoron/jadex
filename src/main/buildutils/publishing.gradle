//apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'de.marcphilipp.nexus-publish'

// -------------------------------------
// ---------- Repositories -------------
// -------------------------------------

if(project.hasProperty('repos'))
{
	for(String repo: repos.split(","))
	{
		// Parse credentials from environment
        def repourl = getVar('repo' + repo, project)
        def repoaccess = parseURLWithCredentials(repourl)
    	//println 'publishing to: ' + repoaccess.url
        //println 'repouser: ' + repoaccess.user
 	    //println 'repopassword: ' + repoaccess.password
		            
	
		// Settings for staging when publishing to central repo
		if("central".equals(repo))
		{
			project.rootProject.plugins.apply('io.codearte.nexus-staging') // auto-close nexus-oss staging
			
			project.rootProject.afterEvaluate {
			    nexusStaging {
			        packageGroup = "org.activecomponents" //optional if packageGroup == project.getGroup()
			        stagingProfileId = "5bcba2b9075ec8" //when not defined will be got from server using "packageGroup"
			        username = repoaccess.user
			        password = repoaccess.password
			    }	   
			}
			
			nexusPublishing {
				repositories {
			    	sonatype() {
			        	connectTimeout = Duration.ofMinutes(10)
			        	clientTimeout = Duration.ofMinutes(10)
			        	username = repoaccess.user
			        	password = repoaccess.password
			        }
			    }
			}
	    }
	    
		// Settings for non-staging publications like nexus.actoron.com
		else
		{
			publishing
			{
		        repositories 
		        {
		            maven {
		                url repoaccess.url
		                credentials {
		                    username repoaccess.user
		                    password repoaccess.password
		                }
		            }
		        }
		    }
		}
	}
}

// -------------------------------------
// ---------- POM contents -------------
// -------------------------------------

def common() {
	return {
        scm {
            url 'https://github.com/actoron/jadex.git'
        }

        url 'https://www.activecomponents.org'

        // beware: organization needs '=' assignment:
        // https://issues.gradle.org/browse/GRADLE-2719
        developers {
            developer {
                id 'alex'
                name 'Alexander Pokahr'
                email 'pokahr@gmx.net'
                //                url 'http://vsis-www.informatik.uni-hamburg.de/members/info.php/84'
                //                organization 'University of Hamburg'
                //                organizationUrl 'http://vsis-www.informatik.uni-hamburg.de/'
                organization 'Actoron GmbH'
                organizationUrl 'https://actoron.com/'
            }
            developer {
                id 'lars'
                name 'Lars Braubach'
                email 'braubach@gmx.net'
                //                url 'http://vsis-www.informatik.uni-hamburg.de/members/info.php/80'
                //                organization 'University of Hamburg'
                //                organizationUrl 'http://vsis-www.informatik.uni-hamburg.de/'
                organization 'Actoron GmbH'
                organizationUrl 'https://actoron.com/'
            }
            developer {
                id 'kai'
                name 'Kai Jander'
                email 'kai.jander@googlemail.com'
                //                url 'http://vsis-www.informatik.uni-hamburg.de/members/info.php/974'
                //                organization 'University of Hamburg'
                //                organizationUrl 'http://vsis-www.informatik.uni-hamburg.de/'
                organization 'Actoron GmbH'
                organizationUrl 'https://actoron.com/'
            }
            developer {
                id 'julian'
                name 'Julian Kalinowski'
                email 'kalinowski@informatik.uni-hamburg.de'
                //                url 'http://vsis-www.informatik.uni-hamburg.de/members/info.php/974'
                //                organization 'Actoron GmbH'
                //                organizationUrl 'https://actoron.com/'
                organization 'University of Hamburg'
                organizationUrl 'http://vsis-www.informatik.uni-hamburg.de/'
            }
        }

    }
}

def commercial() {
	return {
        licenses {
            license {
                name 'Actoron GmbH Commercial Licence'
            }
        }
    }
}

def gpl() {
	return {
		licenses {
			license {
				name 'GPL-3.0'
				url 'https://gnu.org/licenses/gpl-3.0'
				distribution 'repo'
			}
		}
	}
}


// -------------------------------------
// ------------ PUBLISH ----------------
// -------------------------------------

def canSign = project.hasProperty('signing.secretKeyRingFile') || getVar("signingKey", project)!=null

//println getVar("signingKey", project)

//// Selects the projects to publish, add a better heuristic here if available
//def includedproject = getProjectDepth(project) > 1

def configurePom(pom) {
    pom.withXml {
        def root = asNode()
        root.appendNode('description', project.description)
        root.appendNode('name', project.name)
        if (!root.get('packaging').isEmpty()) 
        {
            root.remove(root.get('packaging'))
        }
        root.children().last() + common()
        root.children().last() + gpl()
    }
}

/**
 * Sign the (single) output of another task.
 */
def createSignTask(origtask, classi, exten) {
    def signtask = project.tasks.create('sign' + origtask.name.capitalize(), Sign) {
    	outputs.cacheIf { true }
   		dependsOn origtask
    }
    signtask.sign(classi, origtask.outputs.files.singleFile)
	signtask.signatureFiles.each { sigfile ->
		publishing.publications.mavenJava.artifact(sigfile)
		{
			builtBy signtask
			classifier classi
			extension exten + sigfile.name.substring(sigfile.name.lastIndexOf('.'))
		}
	}
	// Signatory getting created for each task takes a long time -> reuse one signatory for all tasks
	def signat	= rootProject.ext.signatory
	if(signat==null) {
		signat	= signtask.signatory
		rootProject.ext.signatory	= signat
	} else {
		signtask.setSignatory(signat)
	}
	//println "created " +signtask + ", " + signtask.signatory
}

publishing {

    publications {
        if(canSign)
        { 
        	// publish plugin requires each subproject having mavenJava
        
        	mavenJava(MavenPublication)
        	{
        		// Sign archives and pom in separate tasks as archive signing can be cached while pom signing cannot, when jadex version changes.
        		createSignTask(generatePomFileForMavenJavaPublication, null, 'pom')
        		
        		// Disable generation of module.json
        		tasks.matching { it.name == "generateMetadataFileFor${name.capitalize()}Publication" }.all {
        			onlyIf { false }
        		}
        		
	        	if(gradle.ext.webprojects.contains(project.getPath()))
	            {
        			from components.web
        			createSignTask(war, null, 'war')
        			
        			
                  	// default artifact is xyz.war so add xyz.jar xyz-sources.jar and xyz-javadoc.jar for maven central to be happy
        			project.tasks.withType(Jar) 
                    {
                        if(it.name.equals('jar') || it.name.equals('sourcesJar') || it.name.equals('javadocJar')) 
                        {
                            def arti 	= artifact(it)
                            createSignTask(it, arti.classifier, arti.extension)
                        }
                    }
        		}
        		else
        		{
        			from components.java
        			createSignTask(jar, null, 'jar')
        			
                   	// add xyz-sources.jar and xyz-javadoc.jar for maven central to be happy
        			project.tasks.withType(Jar) 
                    {
                        if(it.name.equals('sourcesJar') || it.name.equals('javadocJar')) 
                        {
                            def arti 	= artifact(it)
                            createSignTask(it, arti.classifier, arti.extension)
                        }
                    }
        		}
        		
        		//groupId group
				groupId isCommercial(project) ? 'com.actoron.jadex' : 'org.activecomponents.jadex'
				//artifactId project.name
				artifactId getArtifactName(project)
				//println 'ARTIDD!!! ' + artifactId + ' ' + project.getPath()
				version project.version
				configurePom(pom)
        	}
		}
	}
}

if(canSign) {
	signing {
		// for signing with keys by environment variables https://docs.gradle.org/current/userguide/signing_plugin.html
		//def signingKey1 = findProperty("signingKey")
		//def signingPassword1 = findProperty("signingPassword")
		//println("sign key1: "+signingKey1)
		
		
		def signingKey = getVar("signingKey", project)
		def signingPassword = getVar("signingPassword", project)
		//println("sign key2: "+signingKey)
		useInMemoryPgpKeys(signingKey, signingPassword)

		// Sign archives and pom in separate tasks as archive signing can be cached while pom signing cannot, when jadex version changes.
		//sign publishing.publications.mavenJava
	}
}
