//apply plugin: 'maven-publish'

apply plugin: 'signing'

apply plugin: 'de.marcphilipp.nexus-publish'

// Settings for staging when publishing to central repo
if(project.hasProperty('repo') && "central".equals(repo)) {
	project.rootProject.plugins.apply('io.codearte.nexus-staging') // auto-close nexus-oss staging
	
	project.rootProject.afterEvaluate {
	    nexusStaging {
	        packageGroup = "org.activecomponents" //optional if packageGroup == project.getGroup()
	        stagingProfileId = "5bcba2b9075ec8" //when not defined will be got from server using "packageGroup"
	        username = getVar("repouser", project)
	        password = getVar("repopassword", project)
	    }
	   
	}
	
	nexusPublishing {
		repositories {
	    	sonatype() {
	        	connectTimeout = Duration.ofMinutes(10)
	        	clientTimeout = Duration.ofMinutes(10)
	        	username = getVar("repouser", project)
	        	password = getVar("repopassword", project)
	        }
	    }
	}
}

def common() {
	return {
        scm {
            url 'https://github.com/actoron/jadex.git'
        }

        url 'https://www.activecomponents.org'

        // beware: organization needs '=' assignment:
        // https://issues.gradle.org/browse/GRADLE-2719
        developers {
            developer {
                id 'alex'
                name 'Alexander Pokahr'
                email 'pokahr@gmx.net'
                //                url 'http://vsis-www.informatik.uni-hamburg.de/members/info.php/84'
                //                organization 'University of Hamburg'
                //                organizationUrl 'http://vsis-www.informatik.uni-hamburg.de/'
                organization 'Actoron GmbH'
                organizationUrl 'https://actoron.com/'
            }
            developer {
                id 'lars'
                name 'Lars Braubach'
                email 'braubach@gmx.net'
                //                url 'http://vsis-www.informatik.uni-hamburg.de/members/info.php/80'
                //                organization 'University of Hamburg'
                //                organizationUrl 'http://vsis-www.informatik.uni-hamburg.de/'
                organization 'Actoron GmbH'
                organizationUrl 'https://actoron.com/'
            }
            developer {
                id 'kai'
                name 'Kai Jander'
                email 'kai.jander@googlemail.com'
                //                url 'http://vsis-www.informatik.uni-hamburg.de/members/info.php/974'
                //                organization 'University of Hamburg'
                //                organizationUrl 'http://vsis-www.informatik.uni-hamburg.de/'
                organization 'Actoron GmbH'
                organizationUrl 'https://actoron.com/'
            }
            developer {
                id 'julian'
                name 'Julian Kalinowski'
                email 'kalinowski@informatik.uni-hamburg.de'
                //                url 'http://vsis-www.informatik.uni-hamburg.de/members/info.php/974'
                //                organization 'Actoron GmbH'
                //                organizationUrl 'https://actoron.com/'
                organization 'University of Hamburg'
                organizationUrl 'http://vsis-www.informatik.uni-hamburg.de/'
            }
        }

    }
}

def commercial() {
	return {
        licenses {
            license {
                name 'Actoron GmbH Commercial Licence'
            }
        }
    }
}

def gpl() {
	return {
		licenses {
			license {
				name 'GPL-3.0'
				url 'https://gnu.org/licenses/gpl-3.0'
				distribution 'repo'
			}
		}
	}
}


// -------------------------------------
// ------------ PUBLISH ----------------
// -------------------------------------

def canSign = project.hasProperty('signing.secretKeyRingFile') || getVar("signingKey", project)!=null

//println getVar("signingKey", project)

//// Selects the projects to publish, add a better heuristic here if available
//def includedproject = getProjectDepth(project) > 1

def configurePom(pom) {
    pom.withXml {
        def root = asNode()
        root.appendNode('description', project.description)
        root.appendNode('name', project.name)
        if (!root.get('packaging').isEmpty()) 
        {
            root.remove(root.get('packaging'))
        }
        root.children().last() + common()
        root.children().last() + gpl()
    }
}


publishing {
/*
	println "can publish: "+canPublishToNexus
	println "commercial: "+isCommercial(project)+" repo comm: "+repo_commercial+" repo noncomm:"+repo_noncommercial
	println "can sign:"+canSign
*/	
	// Settings for non-staging publications like nexus.actoron.com
	if(project.hasProperty('repo') && !"central".equals(repo))
	{
        repositories 
        {
            def myrepourl = getVar('repo' + repo + 'url', project)
            def myrepouser = getVar('repo' + repo + 'user', project)
            def myrepopassword = getVar('repo' + repo + 'password', project);
            
//            println "publishing to: "+myrepourl
//            println "repouser: "+myrepouser
//            println "repopassword: "+myrepopassword
            
            maven {
                url myrepourl
                credentials {
                    username myrepouser
                    password myrepopassword
                }
            }
        }
    }

    publications {
        if(canSign)
        { 
        	// publish plugin requires each subproject having mavenJava
        
        	mavenJava(MavenPublication)
        	{
	        	if(gradle.ext.webprojects.contains(project.getPath()))
	            {
        			from components.web
        			
                  	// default artifact is xyz.war so add xyz.jar xyz-sources.jar and xyz-javadoc.jar for maven central to be happy
        			project.tasks.withType(Jar) 
                    {
                        if(it.name.equals('jar') || it.name.equals('sourcesJar') || it.name.equals('javadocJar')) 
                        {
                            artifact(it)
                        }
                    }
        		}
        		else
        		{
        			from components.java
        			
                   	// add xyz-sources.jar and xyz-javadoc.jar for maven central to be happy
        			project.tasks.withType(Jar) 
                    {
                        if(it.name.equals('sourcesJar') || it.name.equals('javadocJar')) 
                        {
                            artifact(it)
                        }
                    }
        		}
        		
        		//groupId group
				groupId isCommercial(project) ? 'com.actoron.jadex' : 'org.activecomponents.jadex'
				//artifactId project.name
				artifactId getArtifactName(project)
				//println 'ARTIDD!!! ' + artifactId + ' ' + project.getPath()
				version project.version
				configurePom(pom)
        	}
		}
	}
}

if(canSign) {
	signing {
		// for signing with keys by environment variables https://docs.gradle.org/current/userguide/signing_plugin.html
		//def signingKey1 = findProperty("signingKey")
		//def signingPassword1 = findProperty("signingPassword")
		//println("sign key1: "+signingKey1)
		
		
		def signingKey = getVar("signingKey", project)
		def signingPassword = getVar("signingPassword", project)
		//println("sign key2: "+signingKey)
		useInMemoryPgpKeys(signingKey, signingPassword)
	
// signing poms with maven-publish is supported with gradle 4.8, however, 4.8 seems to be incompatible with bintray 1.8 :/
		sign publishing.publications.mavenJava
	}
	
}


