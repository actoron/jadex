<?xml version="1.0" encoding="UTF-8"?>
<!--
	<H3>The Environment agent manages and displays the environment.</H3>
-->
<agent xmlns="http://www.activecomponents.org/jadex-bdi"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.activecomponents.org/jadex-bdi
	                    http://www.activecomponents.org/jadex-bdi-${jadex_build_version}.xsd"
	name="Environment"
	package="jadex.bdi.examples.cleanerworld_classic.environment">

	<imports>
		<import>jadex.bdi.examples.cleanerworld_classic.*</import>
		<import>jadex.commons.*</import>
		<import>jadex.commons.future.*</import>
		<import>jadex.bridge.service.types.df.*</import>
		<import>jadex.bridge.fipa.*</import>
		<import>jadex.bridge.service.*</import>
		<import>jadex.bridge.service.search.*</import>
		<import>java.util.logging.Level</import>
	</imports>

	<capabilities>
		<capability name="procap" file="jadex.bdi.planlib.protocols.request.Request"/>
	</capabilities>

	<beliefs>
		<belief name="environment" class="Environment">
			<!-- Use own environment for remote. -->
			<!--<fact>new Environment()</fact>-->
			<!-- Use shared environment for local. -->
			<fact>Environment.getInstance()</fact>
		</belief>

		<!-- The filter for deciding which request messages are handled in this capability. -->
		<beliefref name="rp_filter">
			<concrete ref="procap.rp_filter"/>
		</beliefref>
		
		<belief name="gui" class="jadex.commons.gui.GuiCreator">
			<fact>new jadex.commons.gui.GuiCreator(EnvironmentGui.class, new Class[]{jadex.bridge.IExternalAccess.class}, 
				new Object[]{$scope.getExternalAccess()})</fact>
		</belief>
	</beliefs>

	<goals>
		<querygoalref name="rp_decide_request">
			<concrete ref="procap.rp_decide_request"/>
		</querygoalref>
		<achievegoalref name="rp_execute_request">
			<concrete ref="procap.rp_execute_request"/>
		</achievegoalref>
	</goals>

	<plans>

		<!-- Dispatch the complete vision to a requester. -->
		<plan name="dispatchcompletevision">
			<parameter name="action" class="Object">
				<goalmapping ref="rp_execute_request.action"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="rp_execute_request.result"/>
			</parameter>
			<body class="DispatchCompleteVisionPlan" />
			<trigger>
				<goal ref="rp_execute_request">
					<match>$goal.getParameter("action").getValue() instanceof RequestCompleteVision</match>
				</goal>
			</trigger>
		</plan>

		<!-- Dispatch the actual vision to a requester. -->
		<plan name="dispatchvision">
			<parameter name="action" class="Object">
				<goalmapping ref="rp_execute_request.action"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="rp_execute_request.result"/>
			</parameter>
			<body class="DispatchVisionPlan" />
			<trigger>
				<goal ref="rp_execute_request">
					<match>$goal.getParameter("action").getValue() instanceof RequestVision</match>
				</goal>
			</trigger>
		</plan>

		<!-- Inform the requester if a pickup action succeeds. -->
		<plan name="pickuprequest">
			<parameter name="action" class="Object">
				<goalmapping ref="rp_execute_request.action"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="rp_execute_request.result"/>
			</parameter>
			<body class="PickUpWastePlan" />
			<trigger>
				<goal ref="rp_execute_request">
					<match>$goal.getParameter("action").getValue() instanceof RequestPickUpWaste</match>
				</goal>
			</trigger>
		</plan>

		<!-- Inform the requester if a drop action succeeds. -->
		<plan name="droprequest">
			<parameter name="action" class="Object">
				<goalmapping ref="rp_execute_request.action"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="rp_execute_request.result"/>
			</parameter>
			<body class="DropWastePlan" />
			<trigger>
				<goal ref="rp_execute_request">
					<match>$goal.getParameter("action").getValue() instanceof RequestDropWaste</match>
				</goal>
			</trigger>
		</plan>
	    <!-- <plan name="df_keep_registered">
	        <parameter name="description" class="IDFComponentDescription"/>
	        <body class="jadex.bdi.planlib.df.DFKeepRegisteredPlan"/>
	    </plan>  -->
	    
		<plan name="clear_plan">
			<body class="ClearPlan"/>
		</plan>
	</plans>

	<services>
		<providedservice class="IEnvironmentService">
			<implementation class="EnvironmentService"></implementation>
		</providedservice>
	</services>

	<properties>
		<property name="logging.level">Level.SEVERE</property>
	</properties>

	<configurations>
		<configuration name="default">
			<beliefs>
				<initialbelief ref="rp_filter">
					<fact>jadex.commons.IFilter.ALWAYS</fact>
				</initialbelief>
			</beliefs>
			<plans>
				<!-- <initialplan ref="df_keep_registered">
					<parameter ref="description">
						<value>
							((IDF)$component.getFeature(jadex.bridge.service.component.IRequiredServicesFeature.class).getLocalService(new ServiceQuery( IDF.class, ServiceScope.PLATFORM))).createDFComponentDescription($component.getId(),
								((IDF)$component.getFeature(jadex.bridge.service.component.IRequiredServicesFeature.class).getLocalService(new ServiceQuery( IDF.class, ServiceScope.PLATFORM)))
								.createDFServiceDescription("dispatch vision", "dispatch vision", "University of Hamburg"),
								20000)
 						</value>
					</parameter>
				</initialplan> -->
				<endplan ref="clear_plan"/>
			</plans>
		</configuration>
	</configurations>
</agent>

