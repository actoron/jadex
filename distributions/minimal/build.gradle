plugins {
    id 'application'
}

import org.apache.tools.ant.filters.*

description 'Jadex minimal distribution for running the middleware with core features only (e.g. without GUI).'

application {
    mainClassName = 'jadex.base.Starter'
}

dependencies
{
	api project(':kernels:micro')
	api project(':kernels:microservice')
	api project(':platform:base')
	api project(':transports:base')
	api project(':transports:tcp')
	api project(':transports:relay')
	api project(':transports:websocket')
}

// Add uptodate applications-quickstart sources to example project
try {	// fails for 'new File(project.projectDir,...)' before evaluation!?
	def qsdir	= new File(rootProject.projectDir, 'applications/quickstart/src/main/java/jadex/quickstart/cleanerworld')
//	println 'qsdir ' +qsdir
	if(!qsdir.exists()) {
		// Copy from generated when building from distsrc
		qsdir	= new File(project.projectDir, 'dist/generated/jadex-example-project/src/main/java/quickstart/cleanerworld')
	}
	copySources(exampleZip, qsdir, 'jadex-example-project/src/main/java/quickstart/cleanerworld')
	
	// Copy into generated for different srcZips (re-copy for reproducible file order, as its only reproducible per from/into, not across all from/intos of zip task :( )
	project.parent.subprojects.collect({p -> p.tasks.matching{it.name.equals('srcZip')}}).flatten().each { srcZipTask ->
//		println 'distartmap: '	+ srcZipTask + ', ' + gradle.ext.distartmap.get(srcZipTask.project.name)
		if(gradle.ext.distartmap.get(srcZipTask.project.name).contains(project.path)) {
//			println 'contained in ' + srcZipTask
			copySources(srcZipTask, qsdir, 'sources/distributions/minimal/dist/generated/jadex-example-project/src/main/java/quickstart/cleanerworld')
		}
	}
} catch (Exception e) { println 'ex: ' + e }

def copySources(task, sourcedir, targetdir) {
	task.from(sourcedir) {
		into targetdir
		include '*.*'
		filter { line ->
			line.startsWith('//')		? null :	// Remove outcommented parts (leaves normal indented comments)
			line.startsWith('package')	? 'package quickstart.cleanerworld;' :
			line.contains('conf.addComponent') ? null :	// Remove extra components and add default component below
			line.toLowerCase().contains('add your cleaner') ? line + '\n\t\tconf.addComponent("quickstart/cleanerworld/SimpleCleanerAgent.class");' :
			line	// keep all other lines.
		}
//			filter ( FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance('lf') )
	}
}
