# TODO: Minor
# * performanceTests (publish results?)
# * fix sonarqube and upload result?
# * deploy web examples
# * deploy infrastructure applications or use other update mechanism? (ssp1, timeprovider, anything else...?)

# TODO: Contingeny
# * avoid xlib install for test job
# * enable junit view in gitlab
# * auto-close staging repository
# * allow combining deployJavadocs and deployZips (currently different distributions)
# use distribution plugin for distZip task

image: openjdk:11-jdk

variables:
  # Gradle JVM(!) options
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.caching=true"
  
  # Additional options/tasks for gradlew executions (allows e.g. '-x deployJavadocs')
  GRADLE_EXTRA: "--info"   
  
  # Optional jobs (default for ,e.g., master and stable)
  QUALITY_BRANCHES: 'pipeline-test|master|stable'
  CHECKDISTS_BRANCHES: 'pipeline-test|master|stable'
  CHECKDOCS_BRANCHES: 'pipeline-test|master|stable'
  DEPLOYZIPS_BRANCHES: 'pipeline-test|master|stable'
  DEPLOYSCHEMAS_BRANCHES: 'pipeline-test|master|stable'
  DEPLOYSCHEMADOCS_BRANCHES: 'pipeline-test|master|stable'
  DEPLOYJAVADOCS_BRANCHES: 'pipeline-test|master|stable'
  PUBLISHCENTRAL_BRANCHES: 'pipeline-test|master|stable'
  PUBLISHACTORON_BRANCHES: 'pipeline-test|master|stable'
  TAG_BRANCHES: 'pipeline-test|master|stable'
  
stages:
  - build
  - testandquality
  - deployandpublish
  - failure
  - success

# for caching downloaded gradle dependencies
before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle;

cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches

### Compile all sources
build:
  stage: build
  script:
    - ./gradlew -Pdist=publishdists -Production clean build testClasses -x test -x javadoc $GRADLE_EXTRA
  rules:
    # omit unless explicitly set in env until artifacts are reusable
    - if: $BUILD=="true" && $HEISENTEST!="true"
      when: on_success
    
### Run sonarqube 
quality:
  stage: testandquality
  script:
    - ./gradlew -Production sonarqube -x test $GRADLE_EXTRA
  allow_failure: true
  rules:
    #- if: $QUALITY=="true" || $QUALITY!="false" && $CI_COMMIT_REF_SLUG=~$QUALITY_BRANCHES
    - when: manual

test:
  stage: testandquality
  # start xvfb server for running GUI tests
  services:
    - name: misoca/xvfb
      alias: xvfb
  script:
    # X libs not included in oppenjdk container, grrr...
    - apt-get update -qq && apt-get install -y -qq libxrender1 libxtst6
    - export DISPLAY=xvfb:1
    - ./gradlew -Pdist=publishdists -Production --continue :applications:bdiv3:test test testReport $GRADLE_EXTRA
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - "build/testreport/"
    reports:
      junit: 
        - "*/build/test-results/test/*.xml"
        - "*/*/build/test-results/test/*.xml"
        - "*/*/*/build/test-results/test/*.xml"
        - "*/*/*/*/build/test-results/test/*.xml"
  rules:
    - if: $TEST!="false" && $HEISENTEST!="true"
      when: on_success
 
checkDists:
  stage: testandquality
  script:
    - ./gradlew -Pdist=publishdists -Production checkDists $GRADLE_EXTRA
  rules:
    - if: $HEISENTEST!="true" && ($CHECKDISTS=="true" || $CHECKDISTS!="false" && $CI_COMMIT_REF_SLUG=~$CHECKDISTS_BRANCHES)

checkDocs:
  stage: testandquality
  script:
    - ./gradlew -Pdist=publishdists -Production checkDocs $GRADLE_EXTRA
  artifacts:
    when: on_failure
    expire_in: 1 week
    paths:
      - "*/build/reports/markdownlint/"
  rules:
    - if: $HEISENTEST!="true" && ($CHECKDOCS=="true" || $CHECKDOCS!="false" && $CI_COMMIT_REF_SLUG=~$CHECKDOCS_BRANCHES)

publishCentral:
  stage: deployandpublish
  script: 
    - ./gradlew -Pdist=publishdists -Production :environments:envsupport-jmonkey:publish publish -P repos=central --max-workers=32 $GRADLE_EXTRA
    - ./gradlew -P repos=central closeRepository $GRADLE_EXTRA
  rules:
    - if: $HEISENTEST!="true" && ($PUBLISHCENTRAL=="true" || $PUBLISHCENTRAL!="false" && $CI_COMMIT_REF_SLUG=~$PUBLISHCENTRAL_BRANCHES)
      when: on_success
    
publishActoron:
  stage: deployandpublish
  script: 
    - ./gradlew -Pdist=publishdists -Production :environments:envsupport-jmonkey:publish publish -P repos=actoron --max-workers=16 $GRADLE_EXTRA
  rules:
    - if: $HEISENTEST!="true" && ($PUBLISHACTORON=="true" || $PUBLISHACTORON!="false" && $CI_COMMIT_REF_SLUG=~$PUBLISHACTORON_BRANCHES)
      when: on_success
    
deployZips:
  stage: deployandpublish
  script:
    - ./gradlew -Pdist=publishdists -Production deployZips $GRADLE_EXTRA
  rules:
    - if: $HEISENTEST!="true" && ($DEPLOYZIPS=="true" || $DEPLOYZIPS!="false" && $CI_COMMIT_REF_SLUG=~$DEPLOYZIPS_BRANCHES)
      when: on_success

deployJavadocs:
  stage: deployandpublish
  script:
    - ./gradlew -Pdist=addonjavadoc -Production deployJavadocs $GRADLE_EXTRA
  rules:
    - if: $HEISENTEST!="true" && ($DEPLOYJAVADOCS=="true" || $DEPLOYJAVADOCS!="false" && $CI_COMMIT_REF_SLUG=~$DEPLOYJAVADOCS_BRANCHES)
      when: on_success

deploySchemas:
  stage: deployandpublish
  script:
    - ./gradlew -Pdist=publishdists -Production deploySchemas $GRADLE_EXTRA
  rules:
    - if: $HEISENTEST!="true" && ($DEPLOYSCHEMAS=="true" || $DEPLOYSCHEMAS!="false" && $CI_COMMIT_REF_SLUG=~$DEPLOYSCHEMAS_BRANCHES)
      when: on_success

deploySchemadocs:
  stage: deployandpublish
  script:
    - ./gradlew -Pdist=publishdists -Production deploySchemadocs $GRADLE_EXTRA
  rules:
    - if: $HEISENTEST!="true" && ($DEPLOYSCHEMADOCS=="true" || $DEPLOYSCHEMADOCS!="false" && $CI_COMMIT_REF_SLUG=~$DEPLOYSCHEMADOCS_BRANCHES)
      when: on_success

# cleanuprepo:    
#  stage: failure
#  script: 
#    - ./gradlew closeRepository
#  when: on_failure
#  only:
#    variables:
#      - $UPLOAD == "true"

releaseStagingRepo:
  stage: success
  script:
    -  ./gradlew -Prepos=central releaseRepository
  rules:
    - when: on_success
  #only:
  #  variables:
  #    - $UPLOAD == "true"

tag:
  stage: success
  script:
    -  ./gradlew -Production updateTag $GRADLE_EXTRA
  rules:
    - if: $HEISENTEST!="true" && ($TAG=="true" || $TAG!="false" && $CI_COMMIT_REF_SLUG=~$TAG_BRANCHES)
      when: on_success

# Rules for the whole workflow / pipeline
workflow:
  rules:
    # always run pipeline when pushing *pipeline* branches
    - if: $CI_COMMIT_REF_SLUG=~ /.*pipeline.*/
      when: always
    # never run pipeline on other pushes
    - if: $CI_PIPELINE_SOURCE == 'push'
      when: never
    - when: always

#-------- duplicate test jobs for easy heisenbug searching ------
heisentest1:
  stage: testandquality
  # start xvfb server for running GUI tests
  services:
    - name: misoca/xvfb
      alias: xvfb
  script:
    # X libs not included in oppenjdk container, grrr...
    - apt-get update -qq && apt-get install -y -qq libxrender1 libxtst6
    - export DISPLAY=xvfb:1
    - ./gradlew -Pdist=publishdists -Production --continue :applications:micro:test :platform:base:test test testReport $GRADLE_EXTRA
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - "build/testreport/"
    reports:
      junit: 
        - "*/build/test-results/test/*.xml"
        - "*/*/build/test-results/test/*.xml"
        - "*/*/*/build/test-results/test/*.xml"
        - "*/*/*/*/build/test-results/test/*.xml"
  rules:
    - if: $HEISENTEST=="true"
      when: on_success

heisentest2:
  stage: testandquality
  # start xvfb server for running GUI tests
  services:
    - name: misoca/xvfb
      alias: xvfb
  script:
    # X libs not included in oppenjdk container, grrr...
    - apt-get update -qq && apt-get install -y -qq libxrender1 libxtst6
    - export DISPLAY=xvfb:1
    - ./gradlew -Pdist=publishdists -Production --continue :applications:micro:test :platform:base:test test testReport $GRADLE_EXTRA
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - "build/testreport/"
    reports:
      junit: 
        - "*/build/test-results/test/*.xml"
        - "*/*/build/test-results/test/*.xml"
        - "*/*/*/build/test-results/test/*.xml"
        - "*/*/*/*/build/test-results/test/*.xml"
  rules:
    - if: $HEISENTEST=="true"
      when: on_success

heisentest3:
  stage: testandquality
  # start xvfb server for running GUI tests
  services:
    - name: misoca/xvfb
      alias: xvfb
  script:
    # X libs not included in oppenjdk container, grrr...
    - apt-get update -qq && apt-get install -y -qq libxrender1 libxtst6
    - export DISPLAY=xvfb:1
    - ./gradlew -Pdist=publishdists -Production --continue :applications:micro:test :platform:base:test test testReport $GRADLE_EXTRA
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - "build/testreport/"
    reports:
      junit: 
        - "*/build/test-results/test/*.xml"
        - "*/*/build/test-results/test/*.xml"
        - "*/*/*/build/test-results/test/*.xml"
        - "*/*/*/*/build/test-results/test/*.xml"
  rules:
    - if: $HEISENTEST=="true"
      when: on_success

heisentest4:
  stage: testandquality
  # start xvfb server for running GUI tests
  services:
    - name: misoca/xvfb
      alias: xvfb
  script:
    # X libs not included in oppenjdk container, grrr...
    - apt-get update -qq && apt-get install -y -qq libxrender1 libxtst6
    - export DISPLAY=xvfb:1
    - ./gradlew -Pdist=publishdists -Production --continue :applications:micro:test :platform:base:test test testReport $GRADLE_EXTRA
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - "build/testreport/"
    reports:
      junit: 
        - "*/build/test-results/test/*.xml"
        - "*/*/build/test-results/test/*.xml"
        - "*/*/*/build/test-results/test/*.xml"
        - "*/*/*/*/build/test-results/test/*.xml"
  rules:
    - if: $HEISENTEST=="true"
      when: on_success

heisentest5:
  stage: testandquality
  # start xvfb server for running GUI tests
  services:
    - name: misoca/xvfb
      alias: xvfb
  script:
    # X libs not included in oppenjdk container, grrr...
    - apt-get update -qq && apt-get install -y -qq libxrender1 libxtst6
    - export DISPLAY=xvfb:1
    - ./gradlew -Pdist=publishdists -Production --continue :applications:micro:test :platform:base:test test testReport $GRADLE_EXTRA
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - "build/testreport/"
    reports:
      junit: 
        - "*/build/test-results/test/*.xml"
        - "*/*/build/test-results/test/*.xml"
        - "*/*/*/build/test-results/test/*.xml"
        - "*/*/*/*/build/test-results/test/*.xml"
  rules:
    - if: $HEISENTEST=="true"
      when: on_success

heisentest6:
  stage: testandquality
  # start xvfb server for running GUI tests
  services:
    - name: misoca/xvfb
      alias: xvfb
  script:
    # X libs not included in oppenjdk container, grrr...
    - apt-get update -qq && apt-get install -y -qq libxrender1 libxtst6
    - export DISPLAY=xvfb:1
    - ./gradlew -Pdist=publishdists -Production --continue :applications:micro:test :platform:base:test test testReport $GRADLE_EXTRA
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - "build/testreport/"
    reports:
      junit: 
        - "*/build/test-results/test/*.xml"
        - "*/*/build/test-results/test/*.xml"
        - "*/*/*/build/test-results/test/*.xml"
        - "*/*/*/*/build/test-results/test/*.xml"
  rules:
    - if: $HEISENTEST=="true"
      when: on_success

heisentest7:
  stage: testandquality
  # start xvfb server for running GUI tests
  services:
    - name: misoca/xvfb
      alias: xvfb
  script:
    # X libs not included in oppenjdk container, grrr...
    - apt-get update -qq && apt-get install -y -qq libxrender1 libxtst6
    - export DISPLAY=xvfb:1
    - ./gradlew -Pdist=publishdists -Production --continue :applications:micro:test :platform:base:test test testReport $GRADLE_EXTRA
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - "build/testreport/"
    reports:
      junit: 
        - "*/build/test-results/test/*.xml"
        - "*/*/build/test-results/test/*.xml"
        - "*/*/*/build/test-results/test/*.xml"
        - "*/*/*/*/build/test-results/test/*.xml"
  rules:
    - if: $HEISENTEST=="true"
      when: on_success

heisentest8:
  stage: testandquality
  # start xvfb server for running GUI tests
  services:
    - name: misoca/xvfb
      alias: xvfb
  script:
    # X libs not included in oppenjdk container, grrr...
    - apt-get update -qq && apt-get install -y -qq libxrender1 libxtst6
    - export DISPLAY=xvfb:1
    - ./gradlew -Pdist=publishdists -Production --continue :applications:micro:test :platform:base:test test testReport $GRADLE_EXTRA
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - "build/testreport/"
    reports:
      junit: 
        - "*/build/test-results/test/*.xml"
        - "*/*/build/test-results/test/*.xml"
        - "*/*/*/build/test-results/test/*.xml"
        - "*/*/*/*/build/test-results/test/*.xml"
  rules:
    - if: $HEISENTEST=="true"
      when: on_success

heisentest9:
  stage: testandquality
  # start xvfb server for running GUI tests
  services:
    - name: misoca/xvfb
      alias: xvfb
  script:
    # X libs not included in oppenjdk container, grrr...
    - apt-get update -qq && apt-get install -y -qq libxrender1 libxtst6
    - export DISPLAY=xvfb:1
    - ./gradlew -Pdist=publishdists -Production --continue :applications:micro:test :platform:base:test test testReport $GRADLE_EXTRA
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - "build/testreport/"
    reports:
      junit: 
        - "*/build/test-results/test/*.xml"
        - "*/*/build/test-results/test/*.xml"
        - "*/*/*/build/test-results/test/*.xml"
        - "*/*/*/*/build/test-results/test/*.xml"
  rules:
    - if: $HEISENTEST=="true"
      when: on_success

heisentest10:
  stage: testandquality
  # start xvfb server for running GUI tests
  services:
    - name: misoca/xvfb
      alias: xvfb
  script:
    # X libs not included in oppenjdk container, grrr...
    - apt-get update -qq && apt-get install -y -qq libxrender1 libxtst6
    - export DISPLAY=xvfb:1
    - ./gradlew -Pdist=publishdists -Production --continue :applications:micro:test :platform:base:test test testReport $GRADLE_EXTRA
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - "build/testreport/"
    reports:
      junit: 
        - "*/build/test-results/test/*.xml"
        - "*/*/build/test-results/test/*.xml"
        - "*/*/*/build/test-results/test/*.xml"
        - "*/*/*/*/build/test-results/test/*.xml"
  rules:
    - if: $HEISENTEST=="true"
      when: on_success
