# TODO: Severe
# * fix start scripts not working from dist zips (jadex.bat etc...)

# TODO: Minor
# * performanceTests (publish results?)
# * fix sonarqube and upload result?
# * deploy web examples
# * deploy infrastructure applications or use other update mechanism? (ssp1, timeprovider, anything else...?)

# TODO: Contingeny
# * speedup by caching build artifacts?
# * avoid xlib install for test job
# * enable junit view in gitlab
# * fix runtime of GlobalSuperpeerTest (>2 min, really?)
# * 15 sec. time delay after gradle configure when executing publish task
# * auto-close staging repository
# * allow combining deployJavadocs and deployZips (currently different distributions)

image: openjdk:11-jdk

variables:
  # Gradle JVM(!) options
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  
  # Additional options/tasks for gradlew executions (allows e.g. '-x deployJavadocs')
  GRADLE_EXTRA: "--info"   
  
  # Optional jobs (default for ,e.g., master and stable)
  QUALITY_BRANCHES: 'pipeline-test|master|stable'
  CHECKDISTS_BRANCHES: 'pipeline-test|master|stable'
  DEPLOYZIPS_BRANCHES: 'pipeline-test|master|stable'
  DEPLOYSCHEMAS_BRANCHES: 'pipeline-test|master|stable'
  DEPLOYSCHEMADOCS_BRANCHES: 'pipeline-test|master|stable'
  DEPLOYJAVADOCS_BRANCHES: 'pipeline-test|master|stable'
  PUBLISHCENTRAL_BRANCHES: 'pipeline-test|master|stable'
  PUBLISHACTORON_BRANCHES: 'pipeline-test|master|stable'
  TAG_BRANCHES: 'pipeline-test|master|stable'
  
stages:
  - build
  - testandquality
  - deployandpublish
  - failure
  - success

# for caching downloaded gradle dependencies
before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle;

cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches

### Compile all sources
build:
  stage: build
  script:
    - ./gradlew -Pdist=publishdists -Production clean build testClasses -x test -x javadoc $GRADLE_EXTRA
  rules:
    # omit unless explicitly set in env until artifacts are reusable
    - if: '$BUILD=="true"'
      when: on_success
    
### Run sonarqube 
quality:
  stage: testandquality
  script:
    - ./gradlew -Production sonarqube -x test $GRADLE_EXTRA
  allow_failure: true
  rules:
    - if: $QUALITY=="true" || $QUALITY!="false" && $CI_COMMIT_REF_SLUG=~$QUALITY_BRANCHES
      when: on_success

test:
  stage: testandquality
  # start xvfb server for running GUI tests
  services:
    - name: misoca/xvfb
      alias: xvfb
  script:
    # X libs not included in oppenjdk container, grrr...
    - apt-get update -qq && apt-get install -y -qq libxrender1 libxtst6
    - export DISPLAY=xvfb:1
    - ./gradlew -Pdist=publishdists -Production --continue :applications:micro:test :platform:base:test test testReport $GRADLE_EXTRA
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - "build/testreport/"
    reports:
      junit: 
        - "*/build/test-results/test/*.xml"
        - "*/*/build/test-results/test/*.xml"
        - "*/*/*/build/test-results/test/*.xml"
        - "*/*/*/*/build/test-results/test/*.xml"
  rules:
    - if: $TEST!="false"
      when: on_success
      
test2:
  stage: testandquality
  # start xvfb server for running GUI tests
  services:
    - name: misoca/xvfb
      alias: xvfb
  script:
    # X libs not included in oppenjdk container, grrr...
    - apt-get update -qq && apt-get install -y -qq libxrender1 libxtst6
    - export DISPLAY=xvfb:1
    - ./gradlew -Pdist=publishdists -Production --continue :applications:micro:test :platform:base:test test testReport $GRADLE_EXTRA
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - "build/testreport/"
  rules:
    - if: $CI_COMMIT_REF_SLUG == "heisenbug"
      when: on_success
 
test3:
  stage: testandquality
  # start xvfb server for running GUI tests
  services:
    - name: misoca/xvfb
      alias: xvfb
  script:
    # X libs not included in oppenjdk container, grrr...
    - apt-get update -qq && apt-get install -y -qq libxrender1 libxtst6
    - export DISPLAY=xvfb:1
    - ./gradlew -Pdist=publishdists -Production --continue :applications:micro:test :platform:base:test test testReport $GRADLE_EXTRA
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - "build/testreport/"
  rules:
    - if: $CI_COMMIT_REF_SLUG == "heisenbug"
      when: on_success
 
checkDists:
  stage: testandquality
  script:
    - ./gradlew -Pdist=publishdists -Production checkDists $GRADLE_EXTRA
  rules:
    - if: $CHECKDISTS=="true" || $CHECKDISTS!="false" && $CI_COMMIT_REF_SLUG=~$CHECKDISTS_BRANCHES

publishCentral:
  stage: deployandpublish
  script: 
    - ./gradlew -Pdist=publishdists -Production :environments:envsupport-jmonkey:publish publish -P repos=central $GRADLE_EXTRA
  rules:
    - if: $PUBLISHCENTRAL=="true" || $PUBLISHCENTRAL!="false" && $CI_COMMIT_REF_SLUG=~$PUBLISHCENTRAL_BRANCHES
      when: on_success
    
publishActoron:
  stage: deployandpublish
  script: 
    - ./gradlew -Pdist=publishdists -Production :environments:envsupport-jmonkey:publish publish -P repos=actoron $GRADLE_EXTRA
  rules:
    - if: $PUBLISHACTORON=="true" || $PUBLISHACTORON!="false" && $CI_COMMIT_REF_SLUG=~$PUBLISHACTORON_BRANCHES
      when: on_success
    
deployZips:
  stage: deployandpublish
  script:
    - ./gradlew -Pdist=publishdists -Production deployZips $GRADLE_EXTRA
  rules:
    - if: $DEPLOYZIPS=="true" || $DEPLOYZIPS!="false" && $CI_COMMIT_REF_SLUG=~$DEPLOYZIPS_BRANCHES
      when: on_success

deployJavadocs:
  stage: deployandpublish
  script:
    - ./gradlew -Pdist=addonjavadoc -Production deployJavadocs $GRADLE_EXTRA
  rules:
    - if: $DEPLOYJAVADOCS=="true" || $DEPLOYJAVADOCS!="false" && $CI_COMMIT_REF_SLUG=~$DEPLOYJAVADOCS_BRANCHES
      when: on_success

deploySchemas:
  stage: deployandpublish
  script:
    - ./gradlew -Pdist=publishdists -Production deploySchemas $GRADLE_EXTRA
  rules:
    - if: $DEPLOYSCHEMAS=="true" || $DEPLOYSCHEMAS!="false" && $CI_COMMIT_REF_SLUG=~$DEPLOYSCHEMAS_BRANCHES
      when: on_success

deploySchemadocs:
  stage: deployandpublish
  script:
    - ./gradlew -Pdist=publishdists -Production deploySchemadocs $GRADLE_EXTRA
  rules:
    - if: $DEPLOYSCHEMADOCS=="true" || $DEPLOYSCHEMADOCS!="false" && $CI_COMMIT_REF_SLUG=~$DEPLOYSCHEMADOCS_BRANCHES
      when: on_success

# cleanuprepo:    
#  stage: failure
#  script: 
#    - ./gradlew closeRepository
#  when: on_failure
#  only:
#    variables:
#      - $UPLOAD == "true"

# has some 401 error :-(  
#releaseStagingRepo:
#  stage: success
#  script:
#    -  ./gradlew closeAndReleaseRepository
#  only:
#    variables:
#      - $UPLOAD == "true"
    
tag:
  stage: success
  script:
    -  ./gradlew -Production updateTag $GRADLE_EXTRA
  rules:
    - if: $TAG=="true" || $TAG!="false" && $CI_COMMIT_REF_SLUG=~$TAG_BRANCHES
      when: on_success

# Rules for the whole workflow / pipeline
workflow:
  rules:
    # always run pipeline when pushing *pipeline* branches
    - if: $CI_COMMIT_REF_SLUG=~ /.*pipeline.*/
      when: always
    - if: $CI_COMMIT_REF_SLUG=~ /.*heisenbug.*/
      when: always
    # never run pipeline on other pushes
    - if: $CI_PIPELINE_SOURCE == 'push'
      when: never
    - when: always