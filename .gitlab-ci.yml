# build properties
# branchToBuild
# tagToBuild
# performanceTests
# publishArtifacts
# publishToDummy
# publishCommercial
# deployDists
# resetPatchVersion
# tagBuild
# deployDevSchema
# gradlew -Pdist=publishdists publish -x test -PpublishArtifacts -Prepouser=deployment -Prepopassword= -Production -Psigning.secretKeyRingFile=master.key 

image: openjdk:11-jdk

variables:
  # Gradle JVM(!) options
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  
  # Additional options/tasks for gradlew executions (allows e.g. '-x deployJavadocs')
  GRADLE_EXTRA: "--info"   
  
  # default tasks for all branches
  BUILD_BRANCHES: /master|.ipeline-test|stable/
  TEST_BRANCHES: .*
  
  # default tasks for master and stable
  QUALITY_BRANCHES: 'master|stable'
  DEPLOY_BRANCHES: 'master|stable'
  PUBLISH_BRANCHES: 'master|stable'
  TAG_BRANCHES: 'master|stable'
  
stages:
  - build
  - testandquality
  - deployandpublish
  - failure
  - success

# for caching downloaded gradle dependencies
before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle;

cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches

### Compile all sources
# TODO: make built files available to subsequent stages (currently other jobs also compile -> wastes about 15 sec each).
build:
  stage: build
  script:
    - ./gradlew -Pdist=publishdists -Production clean build testClasses -x test -x javadoc $GRADLE_EXTRA
  rules:
    - if: '$BUILD=="true" || $BUILD!="false" && $CI_COMMIT_REF_SLUG =~ $BUILD_BRANCHES'
      when: on_success
    
### Run sonarqube 
quality:
  stage: testandquality
  script:
    - ./gradlew -Production sonarqube -x test $GRADLE_EXTRA
  allow_failure: true
  rules:
    - if: $QUALITY=="true" || $QUALITY!="false" && $CI_COMMIT_REF_SLUG=~$QUALITY_BRANCHES
      when: on_success

test:
  stage: testandquality
  # start xvfb server for running GUI tests
  services:
    - name: misoca/xvfb
      alias: xvfb
  script:
    # X libs not included in oppenjdk container, grrr...
    - apt-get update -qq && apt-get install -y -qq libxrender1 libxtst6
    - export DISPLAY=xvfb:1
    - ./gradlew -Pdist=publishdists -Production :applications:micro:test :platform:base:test test $GRADLE_EXTRA
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - "*/build/reports/tests/test"
      - "*/*/build/reports/tests/test"
      - "*/*/*/build/reports/tests/test"
      - "*/*/*/*/build/reports/tests/test"
    reports:
      junit: 
        - "*/build/test-results/test/*.xml"
        - "*/*/build/test-results/test/*.xml"
        - "*/*/*/build/test-results/test/*.xml"
        - "*/*/*/*/build/test-results/test/*.xml"
  rules:
    - if: $TEST=="true" || $TEST!="false" && $CI_COMMIT_REF_SLUG=~$TEST_BRANCHES
      when: on_success
 
# Build all kinds of docs/dist files as parallel as possible
# checkDists:
#  stage: package
#  script:
#    - ./gradlew -Pdist=publishdists -Production checkDists
    
deploy:
  stage: deployandpublish
  script:
    - ./gradlew -Pdist=publishdists -Production deployZips deployJavadocs $GRADLE_EXTRA
  rules:
    - if: $DEPLOY=="true" || $DEPLOY!="false" && $CI_COMMIT_REF_SLUG=~$DEPLOY_BRANCHES
      when: on_success

publish:
  stage: deployandpublish
  script: 
    - ./gradlew -Pdist=publishdists -Production :environments:envsupport-jmonkey:publish publish -x test -P repo=actoron $GRADLE_EXTRA
  rules:
    - if: $PUBLISH=="true" || $PUBLISH!="false" && $CI_COMMIT_REF_SLUG=~$PUBLISH_BRANCHES
      when: on_success

# cleanuprepo:    
#  stage: failure
#  script: 
#    - ./gradlew closeRepository
#  when: on_failure
#  only:
#    variables:
#      - $UPLOAD == "true"

# has some 401 error :-(  
#releaseStagingRepo:
#  stage: success
#  script:
#    -  ./gradlew closeAndReleaseRepository
#  only:
#    variables:
#      - $UPLOAD == "true"
    
tag:
  stage: success
  script:
    -  ./gradlew -Production updateTag $GRADLE_EXTRA
  rules:
    - if: $TAG=="true" || $TAG!="false" && $CI_COMMIT_REF_SLUG=~$TAG_BRANCHES
      when: on_success

# Rules for the whole workflow / pipeline
workflow:
  rules:
    # always run pipeline when pushing *pipeline* branches
    - if: $CI_COMMIT_REF_SLUG=~ /.*pipeline.*/
      when: always
    # never run pipeline on other pushes
    - if: $CI_PIPELINE_SOURCE == 'push'
      when: never
    - when: always